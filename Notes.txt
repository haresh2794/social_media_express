What are the things that a app will require?
 - Orginization
 - Unique data per user
 - Attention to detail

How to start up a complex app?
 - Create a app.js file
 - npm init -y creates the package.json file
 - npm instal express
 - We import express __ const express = require('express')
 - Create an app __ const app = express()
 - initiate a get request __ app.get('/', function(req,res){})
 - app.listen(3000)

How to add a common layout file?
 - npm install express-ejs-layouts
 - const expressLayouts = require('express-ejs-layouts')
 - app.use(expressLayouts)
 - and in the layout file put a <%-body %> inside the body tag

How to stay organized in in routing the site?
 - Create a seperate Router
 - router.js
 - in router.js
   const express = require('express')
   const router = express.Router() // this will initiate the express router app
 - then we can create the routers
 - in the server file or the app.js we will put the command  --- 
    const router = require('./router')
    app.use('/',router)
 - IMPORTANT in router.js we must put the exporter command.   module.exports = router

Why we use controllers folder?
 - We need to only have the routes in the router file and the functions should be in a seperate file.
 - It seems unecessary but is very important. It is the middleman that tells what to model and view and gets the routes signal. 
 it converts the network req and covert them to appropriate commands for models(logics on data) and views and then pass the relevant data.

Why we need a model folder?
 - Here for example for registering we need a seperate process like username approval checking email verification. and 
  we cannot give all these logics in the controller folder and therefore we need a model folder to handle the
  logics
 - We include all the business logics for the data. rules that we enforce on a data. Modeling the data. 
 (Email size, username lentgh etc)
 - The model will create a blue print on how the data should be and the controller can validate it
 - We use upper case to represent the blueprint ex User.js and when creatng a obj we have as let user = new User()

What is MVC?
 - Model view controller, It is a standard to organize the data. But is not really compulsory. We built the first app with 
 no Orginization. But that leads to headache when reffered again.

How to make an app accept data?
 - in the server file (app.js)
 - app.use(express.urlencoded({extended:false})) //for HTML data -the blah blah code
 - app.use(express.json()) // for json data 

What can be used instead of RE in email validation?
 - npm install validator

What are the steps in before saving to a DB?
 - Validating and then cleaning up the data

How to stay orginized with DB?
 - Have the connections built in a db.js file
 - then call the listen of app from db.js so the db is connected before the launch
 - Then change the package.json watch to run the db file

What is the security issue with having db connection files open in db.js?
 - Anyone can access

How to secure it?
 - npm install dotenv
 - const dotenv = require('dotenv')
 - dotenv.config()
 - create a .env file in the folder
 - add the variable example if it is the connectionSting type CONNECTIONSTRING=efwfawsfcas
 - to call it type process.env.CONNECTIONSTRING

Why do we need .env
 - ignore the .env in before pushing, To keep the credential safe

How to create a Login form?
 - Edit the view to send a post request to the router
 - set the router to a post request to the url and the function to the controller
 - Create the function req res in the controller and divert the validation to the Model
 - Create the validation action and send the return using a promise(new methd) or a callback function(Trad methd)
 - send the response

How a callback works in User.js?
 - We create a function with a variable and call a callabck in another place to set the return through the call back
 - The controller will get the callback and send the respose through res. 
 - This is done in login cases and many other cases. 
 - This is the Traditional Apporch

How to create promise? (this will play a major part)
 - At the User.js we create a return to new promise with a function with two args resolve and reject. 
 - Return values to resolve and reject (Check the code in User.js)
 - then use that to create a .then({}).catch({}) in the usercontroller

How to create a promise to connect with db?
 - Use the same then(input the arrow fucntion to conncet db and show the result is posituve or negative).cathc(If there is a error in db(NOT USER) return a function)
 - This is done in User.js file.
 - Previously we had the traditional code with the data passes in and the function with err and user.
 - The mongo db has promise in it and we are just leveraging it in this case

What is the big deal with promise compared to promises?
 - In promises we don't nest infinitly the codes that needs to be excected in order. We just use .then(function(){return function}).then() to chain it.
 - https://codepen.io/anon/pen/wbOzrp?editors=0010, https://codepen.io/anon/pen/eabJgY?editors=0010 | Check these links for explaination. In Call back it is nested inside. In promise it is chained

How to use arrow func?
 - Arrow function doesnot need {} if it is on the same line. no need return 
 eatBreakfast().then(()=> eatLunch()).then(()=> eatDinner())

How to create a async function?
 - put async before function
 async function runOurFunc(){
  await eatBreakfast()
  await eatLunch()
  await eatDinner()
  eatDessert() 
}
runOurFunc()
Here await will not run the next line till this is excecuted , BUT will only work inside a async function.
To see action we need to call the function

But How to handle error in this case?
 - Use a try catch block
async function runOurFunc(){
  try {
    await eatBreakfast()
    await eatLunch()
    await eatDinner()
    await eatDessert()
  } catch(err){
    console("Error")
  }
   
}

How to install Hashing package?
 - npm install bcryptjs

How to start using Hasing package in register?
 - const bcrypt = require("bcryptjs") | in Model file for User.js
 - The process has two steps, Creating the salt, the hashing the pass with the salt
 - let salt = bcrypt.genSaltSync(10)
 - this.data.password = bcrypt.hashSync(this.data.password,salt) 

How to facilitate login in Hashing?
 - bcrypt.compareSync(this.data.password,attemtedUser.password) | at the login model function in the if statement

What kind is HTTPS request?
 - It is a stateless request, it will not have memory of what happened Previously

What is trusting a Request?
 - Keeping a state for a period of time. Exmple a Login requst, The user is kept logged in till he logs out
 - Make the server trust the subsiquest request to do logged in funtionality, exapme User accountt features

How can we trust or identify requests?
 - Sessions
 - Tokens

How to enable Session in a app?
 - npm install express-session | Step 1

How to use the Session Package?
 - in the Server file (app.ja in this case)
 - import the package to app.js
 - Setting up the configurations for session 
 - Using the session function, app.user(sessionOption) 
 Check the app.js for details code.

How to controler and hold the session?
 - After we set the server configurations we need to put up things is the Controller file.
 - Create a object at the login. req.session.user 
 - Use this obj to sent the renders of view. 
    exports.home = function(req,res){
      if (req.session.user){
        res.send("Welcome to app!")
  Check usercontroller.js for details

How cookies work to create trust between the server and browser?
 - When a session is started the server will send session obj to the browser and the browser will save it as a cooky this cookie will be used 
 to exchange req and res between server and browser later on till they expire as in config. 

Why we need to store session data in a db?
 - If we save it in the memory in the server we will loose the session if the server restrats

How to store session data in DB?
 - npm install connect-mongo
 - Then to use we need to require it in the server file of the app(app.js). 
 - modify the config at server file add the client| store: new MongoStore({client: require('./db')})
 - Then remove the .db() at the db file after client
 - Since the db() is removed at db, add it at the Model file during export. |  const userCollection = require('../db').db().collection('users')
 If you check the DB there will be a session collection created and in the session data you will have the config details.
  The id is the session id. This id will be equal to the id in the cookies of the browser if you check cookies.

How the trust is created?
 - The id is the session id that is in db. This id will be equal to the id in the cookies of the browser if you check cookies.
 - Thats how the data is trasfered to the between trusted server and browser.

How to seperate Headers in dif sessions?
 - Use if statement and return a true at render
How to pass in values of user to the ejs file?
 - within the obj at render, create the necessay obj atributes

How to create a logout?
 - at the form in the ejs file add the url
 - create the router post request
 - in the usercontroller export logout function add the destroy session and add the redirect func inside the destroy so it will get excecuted after the destroy

How to redirect in login?
 - The session above will auto save, but we will save manually and then gve the asyn function some time to do it and then redirect to the url

How to implement flash message?
 - npm install connect-flash
 - require the package at app.js
 - app.use(flash())

How to create a flash message at false login?
 - req.flash('errors',err) //at the catch of login, This will create a session in the DB for failed auth
 - req.session.save(function(){ //we can use anything instead od 'errors', this is the collection name
            res.redirect('/')
        }) //This will callback and we are manually saving the session. 
 - There will be a failed login session store in DB

How to render the message in the screen?
 - at the render create the obj that with the error msg. and use it at the page. 
  <% errors.forEach(function(message){ %>
    <div class="alert alert-danger text-center"><%=message%></div>
  <% }) %>
 - The error mesage will be deleted once accessed. THATS THE BRILLIENCE OF FLASH PACKAGE

Why is it necessary to do flash at server side?
 - We can use browser side too, but just to enhance user experience. But serverside is necessary in case user diables js flash in browser
  Server side for security, browser for user enhance



How to install Bootsrap?
 - Check the view folder to see how. We just copy pasted the stuff

